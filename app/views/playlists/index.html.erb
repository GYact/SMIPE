<div class="playlists-container">
  <h1>Playlists</h1>
  
  <% if @smipe_playlist %>
    <div class="playlist-section">
      <h2>SMIPE Playlist</h2>
      <div class="playlist-card">
        <% if @smipe_playlist.images.any? %>
          <%= image_tag @smipe_playlist.images.first['url'], alt: "Playlist Cover", class: "playlist-cover" %>
        <% else %>
          <%= image_tag "default_playlist.png", alt: "Default Cover", class: "playlist-cover" %>
        <% end %>
        <div class="playlist-info">
          <h3><%= @smipe_playlist.name %></h3>
          <p><%= @smipe_playlist.tracks.count %> tracks</p>
          <p class="playlist-description"><%= @smipe_playlist.description %></p>
        </div>
      </div>
    </div>
  <% end %>

  <div class="playlist-section">
    <h2>Your Playlists</h2>
    <div class="playlists-grid">
      <% @playlists.each do |playlist| %>
        <div class="playlist-card" data-playlist-id="<%= playlist.id %>">
          <div class="playlist-image-container">
            <img src="<%= playlist.images.first&.dig('url') || 'default_playlist_image.jpg' %>" 
                 alt="<%= playlist.name %>" 
                 class="playlist-image">
          </div>
          <div class="playlist-info">
            <h3 class="playlist-name"><%= playlist.name %></h3>
            <p class="playlist-owner">by <%= playlist.owner.display_name %></p>
            <p class="playlist-tracks"><%= playlist.tracks.size %> tracks</p>
          </div>
          <div class="playlist-tracks-list" style="display: none;">
            <div class="tracks-loading">Loading tracks...</div>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<style>
.playlists-container {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.playlist-section {
  margin-bottom: 40px;
}

.playlist-section h2 {
  color: #FFFFFF;
  margin-bottom: 20px;
}

.playlists-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
}

.playlist-card {
  background: #282828;
  border-radius: 8px;
  padding: 16px;
  transition: background-color 0.3s;
}

.playlist-card:hover {
  background: #383838;
}

.playlist-cover {
  width: 100%;
  aspect-ratio: 1;
  object-fit: cover;
  border-radius: 4px;
  margin-bottom: 16px;
}

.playlist-info h3 {
  color: #FFFFFF;
  margin: 0 0 8px 0;
  font-size: 16px;
}

.playlist-info p {
  color: #B3B3B3;
  margin: 0;
  font-size: 14px;
}

.playlist-description {
  margin-top: 8px;
  font-size: 12px;
  color: #B3B3B3;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const playlistCards = document.querySelectorAll('.playlist-card');
  
  playlistCards.forEach(card => {
    card.addEventListener('click', async function() {
      const playlistId = this.dataset.playlistId;
      const tracksList = this.querySelector('.playlist-tracks-list');
      
      // 既に開いている場合は閉じる
      if (tracksList.style.display === 'block') {
        tracksList.style.display = 'none';
        return;
      }
      
      // 他の開いているプレイリストを閉じる
      document.querySelectorAll('.playlist-tracks-list').forEach(list => {
        if (list !== tracksList) {
          list.style.display = 'none';
        }
      });
      
      // トラックリストを表示
      tracksList.style.display = 'block';
      
      try {
        const response = await fetch(`/playlists/${playlistId}/tracks`, {
          headers: {
            'Accept': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          }
        });
        
        if (response.ok) {
          const tracks = await response.json();
          if (tracks.error) {
            throw new Error(tracks.error);
          }
          tracksList.innerHTML = tracks.map(track => `
            <div class="track-item">
              <div class="track-info">
                <div class="track-name">${track.name}</div>
                <div class="track-artist">${track.artists.map(artist => artist.name).join(', ')}</div>
              </div>
            </div>
          `).join('');
        } else {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to load tracks');
        }
      } catch (error) {
        console.error('Error loading tracks:', error);
        tracksList.innerHTML = `<div class="track-error">${error.message || 'Error loading tracks'}</div>`;
      }
    });
  });
});
</script> 