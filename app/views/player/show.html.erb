<div class="player-container">
  <main class="player-content" data-controller="player">
    <div class="album-art-section" id="album-art-section" data-player-target="albumArt">
      <% if @first_track && @first_track.album && @first_track.album.images.any? %>
        <%= image_tag @first_track.album.images.first['url'], alt: "Album Art", class: "album-image", data: { player_target: "albumImage" } %>
      <% else %>
        <%= image_tag "image.png", alt: "Album Art", class: "album-image", data: { player_target: "albumImage" } %>
      <% end %>

      <!-- スワイプインジケーター -->
      <div class="swipe-indicator right">
        <i class="fas fa-heart"></i>
      </div>
      <div class="swipe-indicator left">
        <i class="fas fa-times"></i>
      </div>
      <div class="swipe-indicator up">
        <i class="fas fa-chevron-up"></i>
      </div>
      <div class="swipe-indicator down">
        <i class="fas fa-chevron-down"></i>
      </div>
      
      <!-- スワイプ中の視覚的フィードバック -->
      <div class="swiping"></div>

      <div class="track-details">
        <p class="song-title"><%= @first_track&.name || 'No Track' %></p>
        <p class="artist-name"><%= @first_track&.artists&.map(&:name)&.join(', ') || 'Unknown Artist' %></p>
      </div>
    </div>

    <div class="player-actions">
      <button id="play-pause-btn" class="action-button play-button">
        <svg id="play-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
          <path d="M8 5v14l11-7z"/>
        </svg>
        <svg id="pause-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" style="display: none;">
          <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
        </svg>
        <span>Play</span>
      </button>
      <button class="action-button skip-button" id="skip-button">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
          <path d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z"/>
        </svg>
        <span>Skip</span>
      </button>
      <button class="action-button like-button" id="like-button">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
          <path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z"/>
        </svg>
        <span>Like</span>
      </button>
    </div>
    
    <section class="up-next">
      <h3>Up Next</h3>
      <div class="up-next-items" id="up-next-items">
        <!-- Up Next items will be inserted here dynamically -->
      </div>
    </section>
  </main>
</div>

<% if @first_track_uri.present? && @all_track_uris.present? %>
  <input type="hidden" id="all-track-uris" value='<%= @all_track_uris.to_json %>'>
  <meta name="spotify-token" content="<%= @access_token %>">

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const tokenMeta = document.querySelector('meta[name="spotify-token"]');
      const token = tokenMeta ? tokenMeta.content : null;
      const trackUris = JSON.parse(document.getElementById('all-track-uris').value);

      if (!token || !trackUris || trackUris.length === 0) return;

      let device_id = null;
      let currentIndex = 0;
      let isPlaying = true;
      let isLiked = false;
      let previousTracks = [];

      const playerController = document.querySelector('[data-controller="player"]');
      
      function playCurrentTrack() {
        if (!device_id) {
          console.error('Device ID not ready');
          return;
        }

        const currentTrackUri = trackUris[currentIndex];
        fetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            uris: [currentTrackUri]
          })
        }).then(() => {
          console.log(`Now playing: ${currentTrackUri}`);
          updateCurrentTrackDisplay(currentTrackUri);
        }).catch(err => {
          console.error('Playback start error:', err);
        });
      }

      function updateUpNextDisplay() {
        const upNextItems = document.getElementById('up-next-items');
        upNextItems.innerHTML = '';

        for (let i = 1; i <= 3; i++) {
          const nextIndex = (currentIndex + i) % trackUris.length;
          const trackUri = trackUris[nextIndex];
          const trackId = trackUri.split(':').pop();

          fetch(`https://api.spotify.com/v1/tracks/${trackId}`, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          })
          .then(response => response.json())
          .then(trackData => {
            const itemDiv = document.createElement('div');
            itemDiv.classList.add('up-next-item');
            
            const img = document.createElement('img');
            img.src = trackData.album.images[0]?.url || '';
            img.alt = 'Album Art';
            img.style.width = '60px';
            img.style.height = '60px';
            img.style.borderRadius = '4px';
            img.style.marginRight = '15px';

            const textDiv = document.createElement('div');
            textDiv.style.flex = '1';

            const title = document.createElement('p');
            title.innerText = trackData.name;
            title.style.margin = '0';
            title.style.fontWeight = 'bold';

            const artist = document.createElement('p');
            artist.innerText = trackData.artists.map(a => a.name).join(', ');
            artist.style.margin = '0';
            artist.style.color = '#B3B3B3';
            artist.style.fontSize = '0.9em';

            textDiv.appendChild(title);
            textDiv.appendChild(artist);

            itemDiv.appendChild(img);
            itemDiv.appendChild(textDiv);

            upNextItems.appendChild(itemDiv);
          })
          .catch(err => console.error('Error updating up next display:', err));
        }
      }

      function updateCurrentTrackDisplay(trackUri) {
        const trackId = trackUri.split(':').pop();

        fetch(`https://api.spotify.com/v1/tracks/${trackId}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })
        .then(response => response.json())
        .then(trackData => {
          const albumImage = document.querySelector('.album-image');
          albumImage.src = trackData.album.images[0]?.url || '';
          albumImage.alt = trackData.name;

          document.querySelector('.song-title').innerText = trackData.name;
          document.querySelector('.artist-name').innerText = trackData.artists.map(a => a.name).join(', ');
        })
        .catch(err => console.error('Error updating current track display:', err));
      }

      function checkIfTrackIsLiked(trackUri) {
        const trackId = trackUri.split(':').pop();
        fetch(`https://api.spotify.com/v1/me/tracks/contains?ids=${trackId}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })
        .then(response => response.json())
        .then(results => {
          isLiked = results[0];
          const likeButton = document.getElementById('like-button');
          if (likeButton) {
            if (isLiked) {
              likeButton.classList.add('liked');
              likeButton.style.color = '#1DB954';
            } else {
              likeButton.classList.remove('liked');
              likeButton.style.color = '#B3B3B3';
            }
          }
        })
        .catch(err => console.error('Error checking if track is liked:', err));
      }

      function handleSkip() {
        console.log('Skip button clicked');
        previousTracks.push(currentIndex);
        currentIndex = (currentIndex + 1) % trackUris.length;
        console.log(`Skipping to track index ${currentIndex}`);
        playCurrentTrack();
        updateUpNextDisplay();
        checkIfTrackIsLiked(trackUris[currentIndex]);
        const skipButton = document.getElementById('skip-button');
        if (skipButton) {
          skipButton.style.color = '#1DB954';
          setTimeout(() => {
            skipButton.style.color = '#B3B3B3';
          }, 500);
        }
      }

      // スワイプイベントのリスナー
      playerController.addEventListener('swipeRight', () => {
        console.log('Swipe right detected');
        const trackId = trackUris[currentIndex].split(':').pop();
        if (trackId) {
          fetch(`/api/tracks/${trackId}/add_to_library`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          })
          .then(response => {
            if (response.ok) {
              console.log('Track added to library');
              // ライブラリに追加成功後、次の曲にスキップ
              handleSkip();
            } else {
              console.error('Failed to add track to library');
            }
          })
          .catch(error => {
            console.error('Error adding track to library:', error);
          });
        }
      });

      playerController.addEventListener('swipeLeft', () => {
        console.log('Swipe left detected');
        const trackId = trackUris[currentIndex].split(':').pop();
        if (trackId) {
          fetch(`/api/tracks/${trackId}/remove_from_library`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          })
          .then(response => {
            if (response.ok) {
              console.log('Track removed from library');
              // ライブラリから削除成功後、次の曲にスキップ
              handleSkip();
            } else {
              console.error('Failed to remove track from library');
            }
          })
          .catch(error => {
            console.error('Error removing track from library:', error);
          });
        }
      });

      playerController.addEventListener('swipeDown', function() {
        console.log('Swipe down detected - Next track');
        handleSkip();
      });

      playerController.addEventListener('swipeUp', function() {
        console.log('Swipe up detected - Previous track');
        if (previousTracks.length > 0) {
          currentIndex = previousTracks.pop();
          playCurrentTrack();
          updateUpNextDisplay();
          checkIfTrackIsLiked(trackUris[currentIndex]);
        }
      });

      window.onSpotifyWebPlaybackSDKReady = () => {
        const player = new Spotify.Player({
          name: 'SMIPE Player',
          getOAuthToken: cb => { cb(token); },
          volume: 0.5
        });

        player.addListener('ready', ({ device_id: id }) => {
          device_id = id;
          playCurrentTrack();
          updateUpNextDisplay();
          updateCurrentTrackDisplay(trackUris[currentIndex]);
          checkIfTrackIsLiked(trackUris[currentIndex]);

          const playPauseBtn = document.getElementById('play-pause-btn');
          const playIcon = document.getElementById('play-icon');
          const pauseIcon = document.getElementById('pause-icon');
          const skipButton = document.getElementById('skip-button');
          const likeButton = document.getElementById('like-button');

          skipButton.addEventListener('click', handleSkip);

          playPauseBtn.addEventListener('click', () => {
            if (isPlaying) {
              player.pause().then(() => {
                console.log('Paused playback');
                playIcon.style.display = 'block';
                pauseIcon.style.display = 'none';
                playPauseBtn.querySelector('span').innerText = 'Play';
                isPlaying = false;
              });
            } else {
              player.resume().then(() => {
                console.log('Resumed playback');
                playIcon.style.display = 'none';
                pauseIcon.style.display = 'block';
                playPauseBtn.querySelector('span').innerText = 'Pause';
                isPlaying = true;
              });
            }
          });

          likeButton.addEventListener('click', () => {
            const trackId = trackUris[currentIndex].split(':').pop();
            if (!isLiked) {
              // Add to library
              fetch(`https://api.spotify.com/v1/me/tracks?ids=${trackId}`, {
                method: 'PUT',
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              }).then(() => {
                isLiked = true;
                likeButton.classList.add('liked');
                likeButton.style.color = '#1DB954';
              });
            } else {
              // Remove from library
              fetch(`https://api.spotify.com/v1/me/tracks?ids=${trackId}`, {
                method: 'DELETE',
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              }).then(() => {
                isLiked = false;
                likeButton.classList.remove('liked');
                likeButton.style.color = '#B3B3B3';
              });
            }
          });
        });

        player.addListener('initialization_error', ({ message }) => console.error(message));
        player.addListener('authentication_error', ({ message }) => console.error(message));
        player.addListener('account_error', ({ message }) => console.error(message));
        player.addListener('playback_error', ({ message }) => console.error(message));

        player.connect();
      };
    });
  </script>
<% end %>

<style>
.album-art-section {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  touch-action: none;
  user-select: none;
  -webkit-user-select: none;
}

.album-image {
  width: 300px;
  height: 300px;
  object-fit: cover;
  border-radius: 8px;
  margin-bottom: 20px;
  will-change: transform;
  touch-action: none;
}

.track-details {
  text-align: center;
}

.song-title {
  font-size: 1.5em;
  font-weight: bold;
  margin: 0;
}

.artist-name {
  color: #B3B3B3;
  margin: 5px 0;
}
</style>